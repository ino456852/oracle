-- 5일차 JOIN

-- @함수 종합실습 - 형변환 함수, 기타 함수
--10. 직원명, 직급코드, 연봉(원) 조회
--  단, 연봉은 ￦57,000,000 으로 표시되게 함
--     연봉은 보너스포인트가 적용된 1년치 급여임
SELECT EMP_NAME "직원명", JOB_CODE "직급코드", 
TO_CHAR (SALARY*12+SALARY*NVL(BONUS,0), 'L999,999,999') "연봉(원)" -- 숫자를 문자로 형변환
FROM EMPLOYEE;

--11. 사원명과, 부서명을 출력하세요.
--   부서코드가 D5이면 총무부, D6이면 기획부, D9이면 영업부로 처리하시오.(case 사용)
--   단, 부서코드가 D5, D6, D9 인 직원의 정보만 조회하고, 부서코드 기준으로 오름차순 정렬함.
SELECT EMP_NAME "사원명",
    CASE -- IF
        WHEN DEPT_CODE = 'D5' THEN '총무부' --DEPT_CODE 가 'D5'면 총무부로 변경
        WHEN DEPT_CODE = 'D6' THEN '기획부'
        WHEN DEPT_CODE = 'D9' THEN '영업부'
    END "부서명"
FROM EMPLOYEE
WHERE DEPT_CODE IN('D5','D6','D9') -- DEPT_CODE가 IN 안의 값인 사람들만 출력
ORDER BY DEPT_CODE ASC; -- ASC 생략가능

--12. 재직중인 직원과 퇴사한 직원의 수를 조회하시오.
SELECT DECODE(ENT_YN, 'N', '제직', '퇴직') "상태" ,COUNT(*) "인원수"
FROM EMPLOYEE
GROUP BY ENT_YN;

-- JOIN으로도 가능

SELECT EMP_NAME,DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT
ON DEPT_CODE = DEPT_ID
WHERE DEPT_CODE IN('D5','D6','D9');



-- @JOIN 종합실습
--1. 주민번호가 1970년대 생이면서 성별이 여자이고, 
-- 성이 전씨인 직원들의 사원명, 주민번호, 부서명, 직급명을 조회하시오.

SELECT EMP_NAME,EMP_NO,DEPT_TITLE,JOB_NAME -- 출력할 컬럼
FROM EMPLOYEE JOIN DEPARTMENT --연결할 테이블
ON DEPT_CODE = DEPT_ID -- 데이터가 공통된 컬럼
JOIN JOB USING(JOB_CODE) -- 다중 JOIN
WHERE EMP_NO LIKE '7%-2%' AND EMP_NAME LIKE '전%'; --조건문
-- EMP_NO이 7로 시작하고 -2를 포함한 사람, EMP_NAME이 전으로 시작하는사람



--2. 이름에 '형'자가 들어가는 직원들의 사번, 사원명, 부서명을 조회하시오.

SELECT EMP_ID"사번",EMP_NAME"사원명",DEPT_TITLE"부서명"
FROM EMPLOYEE JOIN DEPARTMENT
ON DEPT_CODE = DEPT_ID
WHERE EMP_NAME LIKE '%형%';

--3. 해외영업부에 근무하는 사원명, 직급명, 부서코드, 부서명을 조회하시오.
SELECT EMP_NAME,JOB_NAME,DEPT_CODE,DEPT_TITLE
FROM EMPLOYEE JOIN JOB USING (JOB_CODE)JOIN DEPARTMENT -- 연결할 테이블
ON DEPT_CODE = DEPT_ID -- 데이터가 같은 컬럼
WHERE DEPT_TITLE LIKE '해외영업_부';
--4. 보너스포인트를 받는 직원들의 사원명, 보너스포인트, 부서명, 근무지역명을 조회하시오.
-- 테이블의 순서를 신경써야 할 경우가 있다
SELECT EMP_NAME, BONUS, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE JOIN DEPARTMENT
ON DEPT_CODE = DEPT_ID
JOIN LOCATION ON LOCATION_ID = LOCAL_CODE
WHERE BONUS IS NOT NULL; -- 보너스를 받는 직원만


--5. 부서코드가 D2인 직원들의 사원명, 직급명, 부서명, 근무지역명을 조회하시오.
SELECT EMP_NAME,JOB_NAME,DEPT_TITLE,LOCAL_NAME
FROM EMPLOYEE JOIN DEPARTMENT
ON DEPT_CODE = DEPT_ID
JOIN JOB USING(JOB_CODE)
JOIN LOCATION ON LOCATION_ID = LOCAL_CODE
WHERE DEPT_CODE LIKE 'D2';

--6. 급여등급테이블의 최대급여(MAX_SAL)보다 많이 받는 직원들의 사원명, 직급명, 급여, 연봉을 조회하시오.
-- (사원테이블과 급여등급테이블을 SAL_LEVEL컬럼기준으로 조인할 것)
-- 데이터 없음!
SELECT EMP_NAME,JOB_NAME,SALARY,SALARY*12,MAX_SAL
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN SAL_GRADE USING(SAL_LEVEL)
WHERE SALARY > MAX_SAL; -- 조건식은 맞지만 일치하는 사람이 없어서 안나옴

SELECT * FROM SAL_GRADE;

--7. 한국(KO)과 일본(JP)에 근무하는 직원들의 사원명, 부서명, 지역명, 국가명을 조회하시오.
SELECT EMP_NAME,DEPT_TITLE,LOCAL_NAME,NATIONAL_NAME
FROM EMPLOYEE 
JOIN DEPARTMENT
ON DEPT_CODE = DEPT_ID
JOIN LOCATION
ON NATIONAL_CODE = LOCAL_CODE
JOIN NATIONAL USING (NATIONAL_CODE)
WHERE NATIONAL_CODE IN ('KO','JP');


--8. 보너스포인트가 없는 직원들 중에서 직급이 차장과 사원인 직원들의 사원명, 직급명, 급여를 조회하시오. 
--단, join과 IN 사용할 것
SELECT EMP_NAME,JOB_NAME,SALARY
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE BONUS IS NULL AND JOB_CODE IN('J4','J7');



-- 1. JOIN의 종류
-- 1.1 INNER JOIN : 교집합, 일반적으로 사용하는 조인
-- 1.2 OUTER JOIN : 합집합, 모두 출력하는 조인
-- EX) 사원명과 부서명을 출력하시오
SELECT EMP_NAME,DEPT_TITLE 
FROM EMPLOYEE JOIN DEPARTMENT
ON DEPT_CODE = DEPT_ID; -- 21개 2개가 빠짐
-- 2개는 왜 빠졌나? DEPT_CODE가 NULL인 데이터가 빠짐
--> 이것은 INNER JOIN이라고 함

-- LEFT OUTER JOIN은 왼쪽 테이블이 가지고 있는 모든 데이터를 출력
SELECT EMP_NAME,DEPT_TITLE 
FROM EMPLOYEE LEFT OUTER JOIN DEPARTMENT
ON DEPT_CODE = DEPT_ID; --23개

-- RIGHT OUTER JOIN 은 오른쪽 테이블이 가지고 있는 모든 데이터를 출력
SELECT EMP_NAME,DEPT_TITLE 
FROM EMPLOYEE RIGHT OUTER JOIN DEPARTMENT
ON DEPT_CODE = DEPT_ID;

-- FULLL OUTER JOIN 은 양쪽 테이블이 가지고 있는 모든 데이터를 출력
SELECT EMP_NAME,DEPT_TITLE 
FROM EMPLOYEE FULL OUTER JOIN DEPARTMENT 
ON DEPT_CODE = DEPT_ID;

-- 오라클 전용 구문 JOIN 사용해보기
-- INNER JOIN
SELECT EMP_NAME,DEPT_TITLE
FROM EMPLOYEE,DEPARTMENT
WHERE DEPT_CODE = DEPT_ID;

--LEFT OUTER JOIN
SELECT EMP_NAME,DEPT_TITLE
FROM EMPLOYEE,DEPARTMENT
WHERE DEPT_CODE = DEPT_ID(+);

--RIGHT OUTER JOIN
SELECT EMP_NAME,DEPT_TITLE
FROM EMPLOYEE,DEPARTMENT
WHERE DEPT_CODE(+) = DEPT_ID;

-- FULL OUTER JOIN
-- 존재하지 않음